<?php

namespace App\Nova\GatewayUsers;

use App\Helpers\Yesno;
use App\Nova\Resource;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\DateTime;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\Gravatar;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Password;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Http\Requests\NovaRequest;
use Nikans\TextLinked\TextLinked;
use Wemersonrv\InputMask\InputMask;

class GatewayUsers extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\Models\Users\User::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id', 'first_name', 'last_name', 'middle_name', 'email', 'phone',
    ];

    /**
     * Get the fields displayed by the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make()->sortable(),

            TextLinked::make(__('FIO'), function () {
                return sprintf('%s %s %s', $this->last_name, $this->first_name, $this->middle_name);
            })
                ->linkResource('gateway-users', $this->id ?? Yesno::NO)
                ->hideFromDetail(),

            TextLinked::make(__('Name Company'), 'company.name')
                ->linkResource('companies', $this->company->id ?? Yesno::NO)->onlyOnIndex(),

            Boolean::make(__('Owner Company'), 'is_owner')->onlyOnIndex(),

            Gravatar::make(__('Thumbnail'), 'thumbnail_id')->maxWidth(50),

            Text::make(__('First Name'), 'first_name')
                ->rules('required', 'max:255')
                ->hideFromIndex(),

            Text::make(__('Last Name'), 'last_name')
                ->rules('required', 'max:255')
                ->hideFromIndex(),

            Text::make(__('Middle Name'), 'middle_name')
                ->rules('required', 'max:255')
                ->hideFromIndex(),

            Text::make(__('Email'), 'email')
                ->sortable()
                ->rules('required', 'email', 'max:254')
                ->creationRules(['nullable', 'string', 'email', 'max:255', 'unique:users'])
                ->updateRules('nullable', 'string', 'email', 'max:255', 'unique:users,email,{{resourceId}}'),

            InputMask::make(__('Phone'), 'phone')
                ->mask('+38##########')
                ->sortable()
                ->rules('required', 'max:254')
                ->creationRules(['nullable', 'string', 'max:255', 'unique:users'])
                ->updateRules('nullable', 'string', 'max:255', 'unique:users,phone,{{resourceId}}'),

            Password::make(__('Password'), 'password')
                ->onlyOnForms()
                ->creationRules('required', 'string', 'min:8')
                ->updateRules('nullable', 'string', 'min:8'),

            DateTime::make(__('Created At'), 'created_at')
                ->format('Y-MM-DD H:m')->hideWhenCreating()->sortable(true),
        ];
    }

    /**
     * Build an "index" query for the given resource.
     *
     * @param  \Laravel\Nova\Http\Requests\NovaRequest  $request
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public static function indexQuery(NovaRequest $request, $query)
    {
        return $query;
    }

    /**
     * Get the cards available for the request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [];
    }

    public static function label()
    {
        return __('Users');
    }

    public static function createButtonLabel()
    {
        return __('Create User'); // TODO: Change the autogenerated stub
    }

    public static function singularLabel()
    {
        return __('User');
    }
}
